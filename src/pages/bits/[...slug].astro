---
import { format, formatISO } from 'date-fns';
import DefaultLayout from '@layouts/DefaultLayout.astro';
import type { GetStaticPaths } from 'astro';
import {
  getCollection,
  type CollectionEntry,
  getEntries,
  getEntry
} from 'astro:content';
import BlogPostingSchema from '@components/schema/BlogPostingSchema.astro';
import Prose from '@components/Prose.astro';
import Tag from '@components/Tag.astro';
import Toc from '@components/toc/Toc.astro';
import SubscriptionForm from '@components/SubscriptionForm.astro';
import { create_toc } from '@lib/create_toc';

export const prerender = true;

interface Props {
  bit: CollectionEntry<'bits'>;
}

export const getStaticPaths: GetStaticPaths = async () => {
  const bits = await getCollection('bits');

  return bits.map((bit) => ({
    props: { bit: bit },
    params: { slug: bit.slug }
  }));
};

const { bit } = Astro.props;
if (!bit) {
  return Astro.redirect('/404');
}

const { Content, headings } = await bit.render();
const tags = await getEntries(bit.data.tags);
const author = await getEntry(bit.data.authored_by);
const toc = create_toc(headings);
---

<DefaultLayout
  title={bit.data.heading}
  description={bit.data.description}
  contentSize="xl"
  subContentSize="md"
>
  <article>
    <header class="mx-auto max-w-screen-md">
      <Prose size="lg">
        <div class="flex w-full flex-col flex-nowrap items-center">
          <div class="m-auto mb-6">
            <time
              datetime={formatISO(bit.data.published_at)}
              class="text-xl text-stone-400"
            >
              {format(bit.data.published_at, 'PPP')}
            </time>
          </div>
          <h1 class="mb-12 text-balance font-sans text-4xl font-semibold">
            {bit.data.heading}
          </h1>
        </div>
      </Prose>
    </header>

    <div class="flex flex-row gap-4">
      <div class="flex-1"></div>
      <div class="w-full max-w-screen-md">
        <Prose size="lg">
          <Content />
        </Prose>

        <footer class="my-10 flex flex-row gap-2">
          {
            tags.map((t) => (
              <Tag
                tag={{ id: t.id, name: t.data.name }}
                fill={true}
                size="md"
              />
            ))
          }
        </footer>
      </div>

      <aside class="flex-1">
        <div class="sticky top-0">
          <h2 class="mb-2 text-lg font-semibold">On this page</h2>
          <div class="text-stone-500">
            <Toc nodes={toc} depth={3} />
          </div>
        </div>
      </aside>
    </div>
  </article>

  <BlogPostingSchema
    heading={bit.data.heading}
    description={bit.data.description}
    publishedAt={bit.data.published_at}
    tags={tags.map((t) => t.data.name)}
    author={{ name: author.data.name, url: author.data.profile_url }}
  />

  <div class="mx-auto max-w-screen-sm rounded-lg bg-stone-100 p-6">
    <SubscriptionForm />
  </div>
</DefaultLayout>
